description = TRUE)
aggregate(times100$location, by = list('location'), FUN = count)
aggregate(sample3$location, by = list('location'), FUN = count)
mean(sample3$scores_overall)
#2
#a
continents <- read.csv('https://people.bu.edu/kalathur/datasets/continents.csv')
times100
continents
prob1 <- times100 %>%
group_by(location) %>%
summarise(total_rows = n(),
total_number_students=sum(stats_number_students),
avg = mean(stats_number_students)
) %>%
arrange(location)
prob1
prob1 <- times100 %>%
group_by(location) %>%
summarise(total_students=sum(stats_number_students),
avg_students = mean(stats_number_students)
) %>%
arrange(avg_students)
a <- times100 %>%
group_by(location) %>%
summarise(total_students=sum(stats_number_students),
avg_students = mean(stats_number_students)
) %>%
arrange(avg_students)
a
#b
times100 %>%
inner_join(continents)
#b
continents %>% mutate(location=continents$country)
continents
#b
new_continents <- continents %>% mutate(location=continents$country)
times100 %>%
inner_join(new_continents)
new_times100 <- times100 %>%
inner_join(new_continents)
b <- new_times100 %>%
group_by(continent) %>%
summarise(uni_count=n(),
max = max(stats_number_students),
min = min(stats_number_students),
country_count = count(unique(location))
)
b <- new_times100 %>%
group_by(continent) %>%
summarise(uni_count=n(),
max = max(stats_number_students),
min = min(stats_number_students),
country_count = n(unique(location))
)
b <- new_times100 %>%
group_by(continent) %>%
summarise(uni_count=n(),
max = max(stats_number_students),
min = min(stats_number_students),
country_count = nrow(unique(location))
)
b
#c
asia <- filter(new_times100, continent=="Asia")
asia
nrow(asia)
sum(asia$stats_number_students)
mean(asia$stats_number_students)
asia[asia$stats_number_students > mean(asia$stats_number_students),]
nrow(asia[asia$stats_number_students > mean(asia$stats_number_students),])
#a
s <- srswor(12, nrow(times100))
sample1 <- times100[s != 0,]
sample1
sample1 %>% group_by(location) %>% summarise(total_rows = n())
tail(sample1 %>% group_by(location) %>% summarise(total_rows = n()), 1)
mean(sample1$scores_overall)
reviews <- read.table("/Users/ayan/Downloads/aclImdb/train/urls_neg.txt")
reviews
neg_reviews <- read.table("/Users/ayan/Downloads/aclImdb/train/neg/0_3.txt")
neg_reviews
x <- c(16023,220,29645,25911,1740,1668,0,19,6,1,2461,1073,20,43,0,0,0,0,27,29,13,0,0,0,78899)
len(x)
length(x)
data <- read.table("/Users/ayan/Downloads/creditcard.csv")
data
data <- read.csv("/Users/ayan/Downloads/creditcard.csv")
data
head(data)
data <- read.csv("/Users/ayan/Downloads/weather.csv")
table(data)
table(data$WT09_ATTRIBUTES)
table(data$WT09)
View(data)
table(data$PGTM)
table(data$PGTM_ATTRIBUTES)
table(data$TAVG)
table(data$TAVG_ATTRIBUTES)
table(data$WT02)
table(data$WT03)
table(data$WT04)
table(data$AWND_ATTRIBUTES)
table(data$PGTM)
table(data$PGTM_ATTRIBUTES)
table(data$PRCP_ATTRIBUTES)
table(data$SNOW_ATTRIBUTES)
table(data$TAVG_ATTRIBUTES)
table(data$TMAX_ATTRIBUTES)
table(data$TMIN_ATTRIBUTES)
table(data$SNOW)
pnorm(q = 4.5393, mean = 5.454, sd = 0.5924)
pnorm(q = 57.22, mean = 55, sd = 0.74)
pnorm(q = 57.22, mean = 55, sd = 0.74) - pnorm(q = 52.78, mean = 55, sd = 0.74)
median(c(49, 95, 22, 51, 29, 40))
pnorm(q = 860, mean = 1172, sd = 318/sqrt(85))
pnorm(q = 278, mean = 258, sd = 10) - pnorm(q = 238, mean = 258, sd = 10)
qnorm(p = 0.03, mean = 0, sd = 1, lower.tail = FALSE)
mean(c(27, 89, 33, 99, 4, 59))
(273 - 292) / 7
pnorm(q = 301, mean = 280, sd = 5, lower.tail = FALSE)
#3
library(RWeka)
#3
install.packages("rJava", type = "source")
install.packages("RWeka", type = "source")
library(rJava)
sudo R CMD javareconf
CMD javareconf
#3
install.packages("rJava", type = "source")
#3
install.packages("rJava", type = "source")
Sys.setenv(JAVA_HOME="/Users/ayan/Library/Caches/Coursier/jvm/adopt@1.11.0-11/Contents/Home")
Sys.setenv(JAVA_HOME="/Users/ayan/Library/Caches/Coursier/jvm/adopt@1.11.0-11/Contents/Home")
library(rJava)
#3
install.packages("rJava", type = "source")
n <- 57
xbar <- 4.8
s <- 1.74
margin <- qt(0.975,df=n-1)*s/sqrt(n)
lowerinterval <- xbar - margin
lowerinterval
upperinterval <- xbar + margin
upperinterval
n <- 85
margin2 <- qt(0.975,df=n-1)*s/sqrt(n)
answer <- 100 - margin2
answer
n <- 85
margin2 <- qt(0.975,df=n-1)*s/sqrt(n)
71 + margin2
(92-94.9)/8
(94.9-92)/8
install.packages("asbio")
library(asbio)
one.sample.z(null.mu = 83, xbar = 84.93, sigma = 6, n=50, alternative = "two.sided", conf = 0.95)
one.sample.z(null.mu = 92, xbar = 94.9, sigma = 8, n=45, alternative = "two.sided", conf = 0.95)
one.sample.t(null.mu = 100, sd = 5, xbar = 104, n = 10)
qt(p = 0.81, df = 22, lower.tail = TRUE)
one.sample.t(null.mu = 96, sd = 8, xbar = 101.69, n = 16, alternative = "two.sided", conf = 0.975)
pt(4.45, 8)
lowerinterval
upperinterval
regression_line <- lm(c(20,32,22,26,30) ~ c(20,30,24,28,28))
anova(regression_line)
summary(regression_line)
qf(0.99, df1=1, df2=98)
qf(0.01, df1=1, df2=98)
qf(0.99, df1=1, df2=98)
pf(0.01, df=1, df2=98)
pf(0.99, df=1, df2=98)
qf(0.99, df1=1, df2=3)
setwd("/users/ayan/Desktop/BU/Spring 2023/CS555_project")
df <- read.csv("project_data.csv")
View(df)
fraud_subset <- subset(df, isFraud == 1)
View(fraud_subset)
not_fraud_subset <- subset(df, isFraud == 0)
library(dplyr)
set.seed(17)
srs_fraud <- sample_n(fraud_subset, 500)
srs_not_fraud <- sample_n(not_fraud_subset, 500)
srs_df <- rbind(srs_fraud, srs_not_fraud)
View(srs_df)
View(srs_df)
relevant_cols <- c('type', 'amount', 'oldbalanceOrg', 'newbalanceOrg', 'oldbalanceDest', 'newbalanceDest', 'isFraud')
srs_df_filtered <- srs_df[relevant_cols]
relevant_cols <- c('type', 'amount', 'oldbalanceOrig', 'newbalanceOrig', 'oldbalanceDest', 'newbalanceDest', 'isFraud')
srs_df_filtered <- srs_df[relevant_cols]
colnames(srs_df)
relevant_cols <- c("type", "amount", "oldbalanceOrg", "newbalanceOrig", "oldbalanceDest", "newbalanceDest", "isFraud")
srs_df_filtered <- srs_df[relevant_cols]
View(srs_df_filtered)
srs_df_filtered$type <- as.factor(srs_df_filtered$type)
View(srs_df_filtered)
View(srs_df_filtered)
summary(srs_fraud$type)
table(srs_fraud$type)
table(srs_not_fraud$type)
log_reg_model <- glm(srs_df_filtered$isFraud ~ srs_df_filtered$type, family = binomial)
summary(log_reg_model)
log_reg_model <- glm(srs_df_filtered$isFraud ~ srs_df_filtered$amount, family = binomial)
summary(log_reg_model)
mlog_reg_model <- glm(srs_df_filtered$isFraud ~ srs_df_filtered$amount + srs_df_filtered$type, family = binomial)
summary(mlog_reg_model)
predictions <- predict(log_reg_model, type = "response")
roc(srs_df_filtered$isFraud, predictions)
library(pROC)
roc(srs_df_filtered$isFraud, predictions)
t.test(srs_fraud$amount, srs_not_fraud$amount, alternative = "two.sided", var.equal = FALSE)
#
table(srs_fraud$MFA.enabled)
table(srs_not_fraud$MFA.enabled)
table(srs_fraud$isFraudPrevented)
table(srs_not_fraud$isFraudPrevented)
table(srs_fraud$isFlaggedFraud)
table(srs_not_fraud$isFlaggedFraud)
table(srs_fraud$sms.alert)
table(srs_not_fraud$sms.alert)
library(Metrics)
recall(actual = srs_df_filtered$isFraud, predicted = predictions)
precision(actual = srs_df_filtered$isFraud, predicted = predictions)
Metrics::precision(actual = srs_df_filtered$isFraud, predicted = predictions)
library(caret)
log_reg_model
summary(log_reg_model)
confusionMatrix(predictions, srs_df_filtered$isFraud)
recall(actual = srs_df_filtered$isFraud, predicted = predictions)
Metrics::recall(actual = srs_df_filtered$isFraud, predicted = predictions)
Metrics::precision(actual = srs_df_filtered$isFraud, predicted = predictions)
#
table(fraud_subset$MFA.enabled)
table(not_fraud_subset$MFA.enabled)
# anova
aov(amount ~ isFraud, data = srs_df_filtered)
# anova
summary(aov(amount ~ isFraud, data = srs_df_filtered))
# anova
summary(aov(amount ~ type, data = srs_df_filtered))
summary(aov(amount ~ nameDest, data = df))
summary(aov(amount ~ nameDest, data = srs_df))
table(srs_fraud$nameDest)
table(fraud_subset$nameDest)
# boxplot
boxplot(srs_fraud$amount)
# boxplot
boxplot(srs_fraud$amount,
main = "Transaction amount (fraud) boxplot",
xlab = "USD ($)",
ylab = "Transaction amount",
col = "purple",
border = "black",
horizontal = FALSE,
notch = TRUE
)
boxplot(srs_fraud$amount,
main = "Transaction amount (not fraud) boxplot",
xlab = "USD ($)",
ylab = "Transaction amount",
col = "magenta",
border = "black",
horizontal = FALSE,
notch = TRUE
)
boxplot(srs_fraud$amount,
main = "Transaction amount (not fraud) boxplot",
xlab = "USD ($)",
ylab = "Transaction amount",
col = "magenta",
border = "black",
horizontal = TRUE,
notch = TRUE
)
# boxplot
boxplot(srs_fraud$amount,
main = "Transaction amount (fraud) boxplot",
xlab = "USD ($)",
ylab = "Transaction amount",
col = "#6A0DAD",
border = "black",
horizontal = TRUE,
notch = TRUE
)
boxplot(srs_fraud$amount,
main = "Transaction amount (not fraud) boxplot",
xlab = "USD ($)",
ylab = "Transaction amount",
col = "#56A0D3",
border = "black",
horizontal = TRUE,
notch = TRUE
)
library(pROC)
library(ggplot2)
ggroc(roc(srs_df_filtered$isFraud, predictions)) +
theme_minimal() +
ggtitle("My ROC curve") +
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1), color="grey", linetype="dashed")
ggroc(roc(srs_df_filtered$isFraud, predictions)) +
theme_minimal() +
ggtitle("My ROC curve") +
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1), color="green", linetype="dashed")
View(df)
View(df)
table(df$isFlaggedFraud)
View(srs_fraud)
table(df$isFraudPrevented)
View(srs_not_fraud)
table(df$sms.alert)
# boxplot
boxplot(srs_fraud$amount,
main = "Transaction amount (fraud) boxplot",
xlab = "USD ($)",
ylab = "Transaction amount",
col = "#6A0DAD",
border = "black",
horizontal = TRUE,
notch = TRUE
)
boxplot(srs_fraud$amount,
main = "Transaction amount (not fraud) boxplot",
xlab = "USD ($)",
ylab = "Transaction amount",
col = "#56A0D3",
border = "black",
horizontal = TRUE,
notch = TRUE
)
boxplot(srs_not_fraud$amount,
main = "Transaction amount (not fraud) boxplot",
xlab = "USD ($)",
ylab = "Transaction amount",
col = "#56A0D3",
border = "black",
horizontal = TRUE,
notch = TRUE
)
# boxplot
boxplot(srs_fraud$amount,
main = "Transaction amount (fraud) boxplot",
xlab = "Unknown Currency(?)",
ylab = "Transaction amount",
col = "#6A0DAD",
border = "black",
horizontal = TRUE,
notch = TRUE
)
boxplot(srs_not_fraud$amount,
main = "Transaction amount (not fraud) boxplot",
xlab = "Unknown Currency(?)",
ylab = "Transaction amount",
col = "#56A0D3",
border = "black",
horizontal = TRUE,
notch = TRUE
)
# boxplot
boxplot(srs_fraud$amount,
main = "Transaction amount (fraud) boxplot",
xlab = "Unknown Currency(?)",
ylab = "Transaction amount",
col = "#6A0DAD",
border = "black",
horizontal = TRUE,
notch = TRUE
)
boxplot(srs_not_fraud$amount,
main = "Transaction amount (not fraud) boxplot",
xlab = "Unknown Currency(?)",
ylab = "Transaction amount",
col = "#56A0D3",
border = "black",
horizontal = TRUE,
notch = TRUE
)
max(fraud_subset$amount)
min(fraud_subset$amount)
max(srs_fraud$amount)
min(srs_fraud$amount)
min(srs_not_fraud$amount)
max(srs_not_fraud$amount)
mean(srs_fraud$amount)
mean(srs_not_fraud$amount)
#sample mean test
t.test(srs_df$amount, mu = mean(df$amount), alternative = "two.sided")
table(fraud_subset$type)
table(not_fraud_subset$type)
aov(amount ~ isFraud, data=df)
aov(amount ~ type, data=df)
summary(aov(amount ~ type, data=df))
m <- lm(amount ~ type, data = df)
anova(m)
summary(aov(amount ~ isFraud, data = srs_df_filtered))
pairwise.t.test(srs_df$amount, srs_fraud$type)
pairwise.t.test(srs_df$amount, srs_df$type)
pairwise.t.test(srs_df$amount, srs_df$type,p.adjust.method = 'tukey')
pairwise.t.test(srs_df$amount, srs_df$type,p.adjust.method = 'bonferroni')
### pairwise.t.test(srs_df$amount, srs_df$type,p.adjust.method = 'bonferroni')
TukeyHSD(aov(amount ~ type, data = srs_df_filtered), conf.level=.95)
# tests of means
z.test(srs_fraud$amount, srs_not_fraud$amount, alternative = "two.sided")
# tests of means
install.packages("BSDA")
library(BSDA)
z.test(srs_fraud$amount, srs_not_fraud$amount, alternative = "two.sided")
z.test(srs_fraud$amount, srs_not_fraud$amount, alternative = "two.sided", conf.level = 0.95, sigma.x = NULL, sigma.y = NULL)
z.test(srs_fraud$amount, srs_not_fraud$amount, alternative = "two.sided", conf.level = 0.95, mu=0)
# tests of means
t.test(srs_fraud$amount, srs_not_fraud$amount, alternative = "two.sided", var.equal = FALSE)
hist(srs_fraud$amount)
mean(srs_fraud$amount)
axis(side=1, at=seq(0,10000000, 1000000))
axis(side=1, at=seq(0,10000000, 200000))
hist(srs_fraud$amount)
axis(side=1, at=seq(0,10000000, 200000))
hist(srs_fraud$amount, xaxt='n')
axis(side=1, at=seq(0,10000000, 200000))
hist(srs_fraud$amount, xaxt='n', breaks=200000)
hist(srs_fraud$amount, xaxt='n', breaks=1000000)
axis(side=1, at=seq(0,10000000, 1000000))
hist(srs_fraud$amount, xaxt='n', breaks=100)
hist(srs_fraud$amount, xaxt='n', breaks=200)
shapiro.test(srs_fraud$amount)
shapiro.test(srs_not_fraud$amount)
###############################################################################
log_fraud_amount <- log(srs_fraud$amount)
hist(log_fraud_amount)
mean(log_fraud_amount)
log_not_fraud_amount <- log(srs_not_fraud$amount)
hist(log_not_fraud_amount)
mean(log_not_fraud_amount)
shapiro.test(log_fraud_amount)
# anova (of types)
fit <- aov(amount ~ type, data = srs_df_filtered)
resid <- residuals(fit)
hist(resid)
qqnorm(resid)
boxplot(amount ~ type, data = srs_df_filtered)
plot(fit, which = 1)
qqnorm(resid)
shapiro.test(resid)
library(car)
leveneTest(amount ~ type, data = srs_df_filtered)
hist(srs_fraud$amount, main="Distribution of Fraudulent Transactions Amounts", xlab = "Amounts", col="#FFB6C1")
hist(srs_fraud$amount, main="Distribution of Fraudulent Transactions Amounts", xlab = "Amounts", col="#800000")
hist(srs_not_fraud$amount, main="Distribution of Normal Transactions Amounts", xlab = "Amounts", col="#DC143C")
hist(srs_fraud$amount, main="Distribution of Fraudulent Transactions Amounts", xlab = "Amounts", col="#800000")
hist(srs_not_fraud$amount, main="Distribution of Normal Transactions Amounts", xlab = "Amounts", col="#DC143C")
shapiro.test(srs_fraud$amount)
shapiro.test(srs_not_fraud$amount)
hist(log_fraud_amount)
hist(log_fraud_amount, main="Log Distribution of Fraudulent Transactions Amounts", xlab = "Amounts", col="#008000")
hist(log_not_fraud_amount, main="Log Distribution of Normal Transactions Amounts", xlab = "Amounts", col="#7FFF00")
shapiro.test(log_not_fraud_amount)
shapiro.test(log_fraud_amount)
hist(resid)
shapiro.test(resid)
qqnorm(resid)
hist(resid, main="Residuals Distribution of ANOVA", xlab = "Amounts", col="#FFA500")
qqnorm(resid)
leveneTest(amount ~ type, data = srs_df_filtered)
srs_df <- rbind(srs_fraud, srs_not_fraud)
relevant_cols <- c("type", "amount", "isFraud")
srs_df_filtered <- srs_df[relevant_cols]
srs_df_filtered$type <- as.factor(srs_df_filtered$type)
table(srs_fraud$type)
table(srs_not_fraud$type)
#log reg models
log_reg_model <- glm(srs_df_filtered$isFraud ~ srs_df_filtered$amount, family = binomial)
summary(log_reg_model)
log_reg_model <- glm(srs_df_filtered$isFraud ~ srs_df_filtered$amount + srs_df_filtered$type, family = binomial)
summary(log_reg_model)
#log reg models
log_reg_model <- glm(srs_df_filtered$isFraud ~ srs_df_filtered$amount, family = binomial)
summary(log_reg_model)
log_reg_model <- glm(srs_df_filtered$isFraud ~ srs_df_filtered$amount + srs_df_filtered$type, family = binomial)
summary(log_reg_model)
#log reg models
log_reg_model <- glm(srs_df_filtered$isFraud ~ srs_df_filtered$amount, family = binomial)
summary(log_reg_model)
predictions <- predict(log_reg_model, type = "response")
roc(srs_df_filtered$isFraud, predictions)
Metrics::recall(actual = srs_df_filtered$isFraud, predicted = predictions)
Metrics::precision(actual = srs_df_filtered$isFraud, predicted = predictions)
ggroc(roc(srs_df_filtered$isFraud, predictions)) +
theme_minimal() +
ggtitle("My ROC curve") +
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1), color="green", linetype="dashed")
ggroc(roc(srs_df_filtered$isFraud, predictions)) +
theme_minimal() +
ggtitle("ROC curve") +
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1), color="#6495ED", linetype="dashed")
library(caret)
caret::balanced_accuracy(srs_df_filtered$isFraud, predictions)
balanced_accuracy(srs_df_filtered$isFraud, predictions)
library(yardstick)
install.packages("yardstick")
install.packages("yardstick")
library(yardstick)
balanced_accuracy(srs_df_filtered$isFraud, predictions)
yardstick::balanced_accuracy(srs_df_filtered$isFraud, predictions)
bal_accuracy(srs_df_filtered, isFraud, predictions)
bal_accuracy(srs_df_filtered$isFraud, predictions)
bal_accuracy_vec(srs_df_filtered$isFraud, predictions)
srs_df_filtered$predictions <- predictions
bal_accuracy_vec(srs_df_filtered$isFraud, srs_df_filtere$predictions)
bal_accuracy_vec(srs_df_filtered$isFraud, srs_df_filtered$predictions)
bal_accuracy_vec(as.factor(srs_df_filtered$isFraud), srs_df_filtered$predictions)
bal_accuracy_vec(as.factor(srs_df_filtered$isFraud), as.factor(srs_df_filtered$predictions))
